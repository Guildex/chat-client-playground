"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

"""年収"""
enum AnnualIncome {
  UNDER_THREE_MILLION
  BETWEEN_THREE_MILLION_AND_FOUR_MILLION
  BETWEEN_FOUR_MILLION_AND_SIX_MILLION
  BETWEEN_SIX_MILLION_AND_EIGHT_MILLION
  BETWEEN_EIGHT_MILLION_AND_TEN_MILLION
  BETWEEN_TEN_MILLION_AND_FIFTEEN_MILLION
  BETWEEN_FIFTEEN_MILLION_AND_TWENTY_MILLION
  OVER_TWENTY_MILLION
}

type AuthenticateOutput {
  accessToken: String
  refreshToken: String
  user: User
}

enum AuthProvider {
  PHONE
  GOOGLE
  LINE
  APPLE
}

"""血液型"""
enum BloodType {
  A
  B
  AB
  O
}

type CancelMembershipOutput {
  """退会に成功したか"""
  isSucceeded: Boolean!
}

input ConnectionArguments {
  first: Int
  after: String
  last: Int
  before: String
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""飲酒"""
enum Drinking {
  DONT_DRINK
  SOMETIMES
  DRINK
}

type Edge {
  cursor: String!
  node: SearchProfilesOutput!
}

"""学歴"""
enum Education {
  HIGH_SCOOL_GRADUATE
  JUNIOR_COLLEGE_GRADUATE
  UNIVERSITY_GRADUATE
  MASTERS_GRADUATE
  OTHER
}

"""Firebase Cloud Messaging のトークンを保持"""
type FcmToken {
  id: ID!

  """User.id"""
  userId: Int!

  """トークン"""
  value: String!
  user: User!
}

"""体型"""
enum Figure {
  SLIM
  MUSCULAR
  PLUMP
  FAT
}

"""性別"""
enum Gender {
  MALE
  FEMALE
}

"""いいね"""
type Like {
  id: ID!

  """いいねした時間"""
  createdAt: DateTime!
  userLikeOffer: UserLikeOffer
}

input LoginInput {
  """認証プロバイダー"""
  authProvider: AuthProvider!

  """認証プロバイダーに紐づくID"""
  authProviderId: String

  """ユーザー名"""
  nickname: String!

  """メールアドレス"""
  email: String!
}

type LogoutOutput {
  """ログアウトに成功したか"""
  isSucceeded: Boolean!
}

"""結婚状況"""
enum MaritalStatus {
  SINGLE
  DIVORCE
  BEREAVEMENT
}

type Message {
  id: ID!
  talkId: Int!
  senderId: Int!
  messageContentId: Int!
  createdAt: DateTime!
  talk: Talk
  sender: User
  content: MessageContent!
}

type MessageContent {
  id: ID!

  """メッセージ本文"""
  body: String!
  message: Message
}

type Mutation {
  """ログイン"""
  login(input: LoginInput!): AuthenticateOutput!

  """ログアウト"""
  logout: LogoutOutput!

  """アクセストークンが切れた際に実行して、最新のトークンを取得する処理"""
  refreshToken: AuthenticateOutput!

  """退会する処理"""
  cancelMembership: CancelMembershipOutput!

  """ユーザーの本登録時に実行する処理"""
  registerProfile(input: RegisterProfileInput!): RegisterProfileOutput!

  """メッセージを送信"""
  sendMessage(input: SendMessageInput!): Message!

  """Firebase Cloud Messagingのトークンを保存"""
  saveFcmToken(input: SaveFcmTokenInput!): FcmToken!

  """いいねを送る処理"""
  sendLike(input: SendLikeInput!): SendLikeOutput!

  """ユーザ情報を更新"""
  updateUser(
    """アップデート対象の情報"""
    input: UpdateUserInput!
  ): User!
}

"""職業"""
enum Occupation {
  EXECUTIVE
  ACCOUNTANT
  STUDENT
  BEAUTICIAN
  ENGINEER
  DESIGNER
  DIRECTOR
  FREELANCE
  OTHER
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Profile {
  id: ID!

  """User.id"""
  userId: Int!

  """ニックネーム"""
  nickname: String!

  """誕生日"""
  birthday: DateTime!

  """メインのプロフィール画像"""
  mainAvatar: String

  """性別"""
  gender: Gender!

  """血液型"""
  bloodType: BloodType!

  """都道府県のコード"""
  prefectureCode: Int!

  """市区町村のコード"""
  cityCode: Int

  """自己紹介"""
  selfIntroduction: String
  user: User!
  subAvatar: [SubAvatar!]
  detail: ProfileDetail
  _count: ProfileCount!
}

type ProfileCount {
  subAvatar: Int!
}

"""検索条件で利用するプロフィールの詳細情報"""
type ProfileDetail {
  id: ID!

  """Profile.id"""
  profileId: Int!

  """身長"""
  height: Int

  """年収"""
  annualIncome: AnnualIncome

  """職業"""
  occupation: Occupation

  """体型"""
  figure: Figure

  """飲酒"""
  drinking: Drinking

  """喫煙"""
  smoking: Smoking

  """結婚状況"""
  maritalStatus: MaritalStatus

  """学歴"""
  education: Education
  profile: Profile
}

"""プロフィール検索の結果"""
type ProfileDetailsConnection {
  nodes: [SearchProfilesOutput!]!
  edges: [Edge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

input ProfileDetailsFilterArgs {
  height: RangeFilter
  annualIncome: AnnualIncome
  occupation: Occupation
  figure: Figure
  drinking: Drinking
  smoking: Smoking
  maritalStatus: MaritalStatus
  education: Education
}

"""プロフィールクエリの返り値"""
type ProfileOutput {
  """ユーザーID"""
  userId: Int!

  """ニックネーム"""
  nickname: String!

  """年齢"""
  age: Int!

  """メインプロフィール画像"""
  mainAvatar: String

  """サブプロフィール画像の一覧"""
  subAvatar: [SubAvatar!]!

  """このユーザーからいいねをもらえているかどうか"""
  hasReceivedLike: Boolean!

  """このユーザーに対していいねを送っているかどうか"""
  isSentLike: Boolean!

  """都道府県のコード"""
  prefectureCode: Int

  """市区町村のコード"""
  cityCode: Int

  """自己紹介"""
  selfIntroduction: String

  """身長"""
  height: Int

  """職業"""
  occupation: Occupation

  """体型"""
  figure: Figure

  """飲酒"""
  drinking: Drinking

  """喫煙"""
  smoking: Smoking

  """学歴"""
  education: Education
}

type Query {
  """ログイン中のユーザーを取得"""
  viewer: User!

  """トークを取得"""
  talk(
    """トークのuuid"""
    uuid: String!
  ): Talk

  """トーク一覧を取得"""
  talks: [Talk!]!

  """いいねを送った人の一覧を取得"""
  sentLikes: SentLikesOutput!

  """受け取ったいいね一覧を取得"""
  receivedLikes: ReceivedLikesOutput!

  """プロフィール情報を取得"""
  profile(
    """Profile.id"""
    id: Int!
  ): ProfileOutput!

  """ユーザーの検索"""
  searchProfiles(
    """Paginationに必要なパラメーター"""
    connectionArgs: ConnectionArguments!

    """検索条件となる値"""
    filterArgs: ProfileDetailsFilterArgs
  ): ProfileDetailsConnection!
}

input RangeFilter {
  min: Int
  max: Int
}

"""いいねを受け取った人の情報"""
type ReceivedLikes {
  """プロフィールのID（プロフィール情報を取得する際に利用）"""
  profileId: Int!

  """ユーザーID（マッチをする際に利用）"""
  userId: Int!

  """メインプロフィールの画像"""
  mainAvatar: String

  """ニックネーム"""
  nickname: String!

  """年齢"""
  age: Int!
}

type ReceivedLikesOutput {
  likes: [ReceivedLikes!]!
}

"""アカウント登録時に渡す値"""
input RegisterProfileInput {
  """ニックネーム"""
  nickname: String!

  """性別"""
  gender: Gender!

  """誕生日"""
  birthday: DateTime!

  """都道府県コード"""
  prefectureCode: Int
}

type RegisterProfileOutput {
  isSucceeded: Boolean!
}

input SaveFcmTokenInput {
  """Firebase Cloud Messagingのトークン"""
  value: String!
}

type SearchProfilesOutput {
  """プロフィールID"""
  profileId: Int!

  """ニックネーム"""
  nickname: String!

  """年齢"""
  age: Int!

  """メインプロフィール画像"""
  mainAvatar: String
}

input SendLikeInput {
  """受け取り先となるユーザーID"""
  receiverId: Int!
}

type SendLikeOutput {
  """成功したかどうか"""
  isSucceeded: Boolean!
}

input SendMessageInput {
  """チャンネルのuuid"""
  talkUuid: String!

  """メッセージ本文"""
  body: String!
}

"""いいねを送った人の情報"""
type SentLikes {
  """プロフィールのID"""
  profileId: Int!

  """メインプロフィールの画像"""
  mainAvatar: String

  """ニックネーム"""
  nickname: String!

  """年齢"""
  age: Int!
}

"""いいねを送った人の一覧"""
type SentLikesOutput {
  likes: [SentLikes!]!
}

enum ServicePlan {
  FREE
  VIP
}

"""喫煙"""
enum Smoking {
  NO_SMORKING
  SMORKING
  E_CIGARETTE
  SOMETIMES
  DO_NOT
  STOP
}

"""サブのプロフィール画像"""
type SubAvatar {
  id: ID!

  """Profile.id"""
  profileId: Int!

  """プロフィール画像のURL"""
  url: String!
  profile: Profile
}

type Subscription {
  """メッセージ送信を監視"""
  messageSent(
    """Talkのuuid"""
    talkUuid: String!
  ): Message!
}

type Talk {
  """トークを識別するユニークID"""
  uuid: String!
  messages: [Message!]
  users: [UserTalkJoin!]
  _count: TalkCount!
}

type TalkCount {
  messages: Int!
  users: Int!
}

"""ユーザー情報更新時に渡す値"""
input UpdateUserInput {
  """ニックネーム"""
  nickname: String

  """メールアドレス"""
  email: String

  """身長"""
  height: Int

  """年収"""
  annualIncome: AnnualIncome

  """職業"""
  occupation: Occupation

  """体型"""
  figure: Figure

  """飲酒"""
  drinking: Drinking

  """喫煙"""
  smoking: Smoking

  """結婚状況"""
  maritalStatus: MaritalStatus

  """学歴"""
  education: Education
}

type User {
  id: ID!

  """メールアドレス"""
  email: String!

  """サービスプラン"""
  servicePlan: ServicePlan!

  """ユーザーの状態"""
  status: UserStatus!
  profile: Profile
  _count: UserCount!
}

type UserCount {
  userTalkJoins: Int!
  message: Int!
  sentLikes: Int!
  receivedLikes: Int!
}

"""ユーザーといいねの中間テーブル"""
type UserLikeOffer {
  """いいねを送った人のユーザーID"""
  senderId: Int!

  """いいねを受け取った人のユーザーID"""
  receiverId: Int!

  """いいねのID"""
  likeId: Int!
  sender: User!
  receiver: User!
  like: Like!
}

"""ユーザーの状態"""
enum UserStatus {
  UNAUTHENTICATED
  LOGGED_IN_BY_EXTERNAL
  AVAILABLE
  VERIFIED
  FROZEN
}

type UserTalkJoin {
  userId: Int!
  talkId: Int!
  joinedAt: DateTime!
  user: User!
  talk: Talk!
}

